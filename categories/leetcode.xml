<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>wd's blog (Posts about leetcode)</title><link>https://fpghwd.github.io/</link><description></description><atom:link href="https://fpghwd.github.io/categories/leetcode.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2021 &lt;a href="mailto:ggwdwhu@gmail.com"&gt;Wang Ding&lt;/a&gt; </copyright><lastBuildDate>Fri, 19 Mar 2021 19:28:06 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Leetcode92. Reverse Linked List II</title><link>https://fpghwd.github.io/posts/leetcode92-reverse-linked-list-ii/</link><dc:creator>Wang Ding</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;a href="https://leetcode.com/problems/reverse-linked-list-ii/"&gt;92. Reverse Linked List II&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Solution&lt;/b&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-C"&gt;
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
  public:
    ListNode *reverseBetween(ListNode *head, int m, int n) {
        if (m == n) // 当 m = n 时并没有变化
            return head;

        int i = 1;
        ListNode *psuedo_head = new ListNode(), *pre = psuedo_head, *n_pre;

        for (ListNode *w = head; w;) {
            if (i &amp;lt;= m || i &amp;gt; n) {
                if (i == m)
                    n_pre = w;
                pre-&amp;gt;next = w;
                if (i != m)
                    pre = w;
                w = w-&amp;gt;next;
            } else if (i &amp;gt; m &amp;amp;&amp;amp; i &amp;lt;= n) {
                ListNode *tmp = w;
                w = w-&amp;gt;next;
                tmp-&amp;gt;next = pre-&amp;gt;next;
                pre-&amp;gt;next = tmp;
                if (i == n)
                    pre = n_pre;
            }
            i++;
        }

        pre-&amp;gt;next = nullptr; // 尾节点后续是 null

        return psuedo_head-&amp;gt;next;
    }
};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-html"&gt;
Status: Accepted (44/44)

Runtime: 4 ms, faster than 64.43% of C++ submissions.

Memory Usage: 7.8 MB, less than 16.96% of C++ submissions.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
第一次做的时候没想那么多，暴力的做法。后来做的时候就想到这是将链表的导致的前插和尾插组合在一起的题。并不难，只要分别搞清楚这两种写法就能写出来。
&lt;/p&gt;&lt;/div&gt;</description><category>leetcode</category><guid>https://fpghwd.github.io/posts/leetcode92-reverse-linked-list-ii/</guid><pubDate>Mon, 05 Oct 2020 10:04:08 GMT</pubDate></item><item><title>Leetcode96. Unique Binary Search Trees</title><link>https://fpghwd.github.io/posts/leetcode96-unique-binary-search-trees/</link><dc:creator>Wang Ding</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;a href="https://leetcode.com/problems/unique-binary-search-trees/"&gt;96. Unique Binary Search Trees&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Solution&lt;/b&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-C"&gt;class Solution {
  public:
    int numTrees(int n) {
        if (n == 0 || n == 1)return 1;

        int count = 0;
        for (int i = 1; i &amp;lt;= n; i++)count += numTrees(i - 1) * numTrees(n - i);

        return count;
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-html"&gt;
Status: Accepted (19/19)

Runtime: 1220 ms, faster than 11.92% of C++ submissions.

Memory Usage: 6 MB, less than 59.10% of C++ submissions.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
用 DP 做更快一点，但递归对理解更友好些。反过来， DP 不就是递归的递推公式的代数形式嘛。能用递归就做出来的事情，就不需要迭代了，毕竟&lt;a href="http://algosaur.us/recursion/"&gt;“To iterate is human, to recurse, divine”&lt;/a&gt;. 能请神去做的事情，就不要麻烦人啦。
&lt;/p&gt;&lt;/div&gt;</description><category>leetcode</category><guid>https://fpghwd.github.io/posts/leetcode96-unique-binary-search-trees/</guid><pubDate>Thu, 01 Oct 2020 04:39:40 GMT</pubDate></item><item><title>Leetcode824. Goat Latin</title><link>https://fpghwd.github.io/posts/leetcode824-goat-latin/</link><dc:creator>Wang Ding</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;a href="https://leetcode.com/problems/goat-latin/"&gt;824. Goat Latin&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Solution&lt;/b&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-C"&gt;
class Solution {
  public:
    string toGoatLatin(string S) {
        int start = 0, end = 0, i = 1;
        string goat = "";
        while (start &amp;lt; S.length()) {
            if (i != 1)
                goat += " ";
            while (end &amp;lt; S.length() &amp;amp;&amp;amp; isalpha(S[end]))
                end++;
            if (S[start] == 'a' || S[start] == 'e' || S[start] == 'i' ||
                S[start] == 'o' || S[start] == 'u' || S[start] == 'A' ||
                S[start] == 'E' || S[start] == 'I' || S[start] == 'O' ||
                S[start] == 'U') {
                goat += S.substr(start, end - start);
            } else {
                if (start + 1 != end) {
                    goat += S.substr(start + 1, end - start - 1);
                }
                goat += S.substr(start, 1);
            }
            goat += "ma";
            goat += string(i, 'a');

            end++, start = end, i++;
        }
        return goat;
    }
};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-html"&gt;
Status: Accepted (99/99)

Runtime: 0 ms, faster than 100.00% of C++ submissions.

Memory Usage: 6.6 MB, less than 76.77% of C++ submissions.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
字符串的題目都是用指針來做的。
&lt;/p&gt;&lt;/div&gt;</description><category>leetcode</category><guid>https://fpghwd.github.io/posts/leetcode824-goat-latin/</guid><pubDate>Tue, 29 Sep 2020 10:01:13 GMT</pubDate></item><item><title>Leetcode572. Subtree of Another Tree</title><link>https://fpghwd.github.io/posts/leetcode572-subtree-of-another-tree/</link><dc:creator>Wang Ding</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;a href="https://leetcode.com/problems/subtree-of-another-tree/"&gt;572. Subtree of Another Tree&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Solution&lt;/b&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-C"&gt;
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),
 * right(right) {}
 * };
 */
class Solution {
  public:
    bool isSubtree(TreeNode *s, TreeNode *t) {
        // return isSameTree(s, t) || isSameTree(s-&amp;gt;left, t) ||
        //        isSameTree(s-&amp;gt;right, t);
        if (s == NULL &amp;amp;&amp;amp; t == NULL)
            return true;
        if (s == NULL)
            return false;
        if (t == NULL)
            return true;
        bool isSub;
        if (s-&amp;gt;val == t-&amp;gt;val)
            isSub = isSameTree(s, t);
        if (isSub)
            return true;
        return isSubtree(s-&amp;gt;left, t) || isSubtree(s-&amp;gt;right, t);
    }

    bool isSameTree(TreeNode *s, TreeNode *t) {
        if (s == nullptr &amp;amp;&amp;amp; t == nullptr) {
            return true;
        } else {
            if (s == nullptr || t == nullptr)
                return false;
            if (s-&amp;gt;val != t-&amp;gt;val)
                return false;
            else
                return isSameTree(s-&amp;gt;left, t-&amp;gt;left) &amp;amp;&amp;amp;
                       isSameTree(s-&amp;gt;right, t-&amp;gt;right);
        }
    }
};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-html"&gt;
Status: Accepted (183/183)

Runtime: 40 ms, faster than 66.02% of C++ submissions.

Memory Usage: 29.7 MB, less than 18.21% of C++ submissions.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
第一次做的时候并没有做对，第二次倒是 AC 了。没啥感觉，就是感觉自己的方法代码有点复杂。
&lt;/p&gt;&lt;/div&gt;</description><category>leetcode</category><guid>https://fpghwd.github.io/posts/leetcode572-subtree-of-another-tree/</guid><pubDate>Tue, 29 Sep 2020 08:20:04 GMT</pubDate></item><item><title>Leetcode093. Restore IP Addresses</title><link>https://fpghwd.github.io/posts/leetcode093-restore-ip-addresses/</link><dc:creator>Wang Ding</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;a href="https://leetcode.com/problems/restore-ip-addresses/"&gt;93. Restore IP Addresses&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Solution&lt;/b&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-C"&gt;
class Solution {
  public:
    vector&amp;lt;string&amp;gt; addresses;
    vector&amp;lt;string&amp;gt; restoreIpAddresses(string s) {
        vector&amp;lt;string&amp;gt; path;
        dfs(s, path);
        return addresses;
    }

    void dfs(string s, vector&amp;lt;string&amp;gt; &amp;amp;path) {

        if (s == "" &amp;amp;&amp;amp; path.size() == 4) {
            string tmp = "";
            for (string s : path) {
                if (tmp != "")
                    tmp += ".";
                tmp += s;
            }
            addresses.push_back(tmp);
            return;
        }

        if (path.size() &amp;gt; 4 || s == "")
            return;

        for (int i = 1; i &amp;lt;= s.length(); i++) {
            string ip = s.substr(0, i);
            if (i &amp;gt; 1 &amp;amp;&amp;amp; s[0] == '0')
                return;
            if (stoi(ip) &amp;gt; 255)
                break;
            path.push_back(ip);
            dfs(s.substr(i, s.length() - i), path);
            path.pop_back();
        }
    }
};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-html"&gt;
Status: Accepted (147/147)

Runtime: 4 ms, faster than 81.89% of C++ submissions.

Memory Usage: 7.6 MB, less than 13.80% of C++ submissions.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
第一次嘗試是忽略了 10.0.010.0 中的 010 是不能作爲一個符合要求的 ip 段。所以添加了
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-C"&gt;if (i &amp;gt; 1 &amp;amp;&amp;amp; s[0] == '0')
    return;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
這一段，雖然丑但是很有用。
&lt;/p&gt;&lt;/div&gt;</description><category>leetcode</category><guid>https://fpghwd.github.io/posts/leetcode093-restore-ip-addresses/</guid><pubDate>Mon, 28 Sep 2020 15:12:03 GMT</pubDate></item><item><title>Leetcode543. Diameter of Binary Tree</title><link>https://fpghwd.github.io/posts/leetcode528-diameter-of-binary-tree/</link><dc:creator>Wang Ding</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;a href="https://leetcode.com/problems/diameter-of-binary-tree/"&gt;543. Diameter of Binary Tree&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Solution&lt;/b&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-C"&gt;
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),
 * right(right) {}
 * };
 */
class Solution {
  public:
    int diameter = 0;
    int diameterOfBinaryTree(TreeNode *root) {
        depthTravel(root);
        return diameter;
    }
    int depthTravel(TreeNode *root) {
        if (root == nullptr)
            return 0;
        int left = depthTravel(root-&amp;gt;left);
        int right = depthTravel(root-&amp;gt;right);
        diameter = max(left + right, diameter);
        return 1 + max(left, right);
    }
};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-html"&gt;
Status: Accepted (106/106)

Runtime: 12 ms, faster than 88.39% of C++ submissions.

Memory Usage: 21 MB, less than 13.09% of C++ submissions.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
同樣的是一個樹遍歷的題目。不過第一次做的時候因爲想用一個函數解決問題，但是好像是不行的。因爲遞歸返回值如果是最長的直徑的話，就無法只用一個單一的返回值來構造這個函數，又不能修改參數。所以遞歸函數的返回值需要更多的信息，因此還是藉助了返回值爲結點高度的函數 &lt;code&gt;depthTravel&lt;/code&gt; 。&lt;/p&gt;&lt;/div&gt;</description><category>leetcode</category><guid>https://fpghwd.github.io/posts/leetcode528-diameter-of-binary-tree/</guid><pubDate>Mon, 28 Sep 2020 04:21:11 GMT</pubDate></item><item><title>Leetcode901. Sort Array By Parity</title><link>https://fpghwd.github.io/posts/leetcode901-sort-array-by-parity/</link><dc:creator>Wang Ding</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;a href="https://leetcode.com/problems/sort-array-by-parity/"&gt;901. Sort Array By Parity&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Solution&lt;/b&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-C"&gt;
class Solution {
  public:
    vector&amp;lt;int&amp;gt; sortArrayByParity(vector&amp;lt;int&amp;gt; &amp;amp;A) {
        sort(begin(A), end(A),
             [](auto &amp;amp;a, auto &amp;amp;b) { return a % 2 == 0 &amp;amp;&amp;amp; b % 2 == 1; });
        return A;
    }
};


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-html"&gt;
Status: Accepted (285/285)

Runtime: 36 ms, faster than 19.11% of C++ submissions.

Memory Usage: 16.6 MB, less than 16.48% of C++ submissions.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
模仿 0947 reorder-data-in-log-files 题目的写法。
&lt;/p&gt;&lt;/div&gt;</description><category>leetcode</category><guid>https://fpghwd.github.io/posts/leetcode901-sort-array-by-parity/</guid><pubDate>Sat, 26 Sep 2020 15:24:25 GMT</pubDate></item><item><title>Leetcode733. Flood Fill</title><link>https://fpghwd.github.io/posts/leetcode733-flood-fill/</link><dc:creator>Wang Ding</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;a href="https://leetcode.com/problems/flood-fill/"&gt;733. Flood Fill&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Solution&lt;/b&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-C"&gt;
class Solution {
  public:
    vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;
    floodFill(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; &amp;amp;image, int sr, int sc, int newColor) {
        int old_color = image[sr][sc];
        if (old_color == newColor)
            return image;

        floodFill(image, sr, sc, newColor, old_color);

        return image;
    }

    void floodFill(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; &amp;amp;image,
                   int sr,
                   int sc,
                   int newColor,
                   int oldColor) {
        // paint
        image[sr][sc] = newColor;

        // paint others
        if (sr - 1 &amp;gt;= 0 &amp;amp;&amp;amp; oldColor == image[sr - 1][sc])
            floodFill(image, sr - 1, sc, newColor);
        if (sr + 1 &amp;lt; image.size() &amp;amp;&amp;amp; oldColor == image[sr + 1][sc])
            floodFill(image, sr + 1, sc, newColor);
        if (sc - 1 &amp;gt;= 0 &amp;amp;&amp;amp; oldColor == image[sr][sc - 1])
            floodFill(image, sr, sc - 1, newColor);
        if (sc + 1 &amp;lt; image[0].size() &amp;amp;&amp;amp; oldColor == image[sr][sc + 1])
            floodFill(image, sr, sc + 1, newColor);
    }
};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-html"&gt;
Status: Accepted (277/277)

Runtime: 12 ms, faster than 97.05% of C++ submissions.

Memory Usage: 14.9 MB, less than 5.01% of C++ submissions.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
第一次做的时候忽略了没有保存 &lt;code&gt;old_color&lt;/code&gt; ，后面有问题。&lt;/p&gt;&lt;/div&gt;</description><category>leetcode</category><guid>https://fpghwd.github.io/posts/leetcode733-flood-fill/</guid><pubDate>Sat, 26 Sep 2020 04:17:37 GMT</pubDate></item><item><title>Leetcode696. Count Binary Substrings</title><link>https://fpghwd.github.io/posts/leetcode696-count-binary-substrings/</link><dc:creator>Wang Ding</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;a href="https://leetcode.com/problems/count-binary-substrings/"&gt;696. Count Binary Substrings&lt;/a&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-C"&gt;
class Solution {
  public:
    int countBinarySubstrings(string s) {
        if (s == "")
            return 0;
        vector&amp;lt;int&amp;gt; vi_pos;
        for (int i = 1; i &amp;lt; s.length(); i++) {
            if (s[i] != s[i - 1])
                vi_pos.push_back(i);
        }
        int count = 0, left, right;
        for (int i = 0; i &amp;lt; vi_pos.size(); i++) {
            left = vi_pos[i] - (i == 0 ? 0 : vi_pos[i - 1]);
            right = ((i == vi_pos.size() - 1) ? s.length() : vi_pos[i + 1]) -
                    vi_pos[i];
            count += min(left, right);
        }
        return count;
    }
};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-html"&gt;
Status: Accepted (90/90)

Runtime: 40 ms, faster than 99.85% of C++ submissions.

Memory Usage: 14.4 MB, less than 6.03% of C++ submissions.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
这道题我在 &lt;code&gt;right = ((i =&lt;/code&gt; vi&lt;sub&gt;pos.size&lt;/sub&gt;() - 1) ? s.length() : vi&lt;sub&gt;pos&lt;/sub&gt;[i + 1]) -
                    vi&lt;sub&gt;pos&lt;/sub&gt;[i];= 的时候把 &lt;code&gt;s.length()&lt;/code&gt; 写成了 &lt;code&gt;vi_pos.size()&lt;/code&gt; ，一直没有检查出来。后来代码拆开了几个变量用 gdb 调试出来了 right 值的问题。隐藏得太深了。
&lt;/p&gt;&lt;/div&gt;</description><category>leetcode</category><guid>https://fpghwd.github.io/posts/leetcode696-count-binary-substrings/</guid><pubDate>Sat, 26 Sep 2020 02:34:20 GMT</pubDate></item><item><title>Leetcode687. Longest Univalue Path</title><link>https://fpghwd.github.io/posts/leetcode687-longest-univalue-path/</link><dc:creator>Wang Ding</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;a href="https://leetcode.com/problems/longest-univalue-path/"&gt;687. Longest Univalue Path&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Solution&lt;/b&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-C"&gt;
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),
 * right(right) {}
 * };
 */

class Solution {
  public:
    int luvp = 0;
    int longestUnivaluePath(TreeNode *root) {
        if (root == nullptr)
            return 0;
        travelPath(root);
        return luvp - 1;
    }

    int travelPath(TreeNode *root) {
        int left = 0, right = 0;
        if (root-&amp;gt;left != nullptr)
            left = travelPath(root-&amp;gt;left);
        if (root-&amp;gt;right != nullptr)
            right = travelPath(root-&amp;gt;right);
        int left_tmp =
            ((root-&amp;gt;left &amp;amp;&amp;amp; root-&amp;gt;left-&amp;gt;val == root-&amp;gt;val) ? left : 0);
        int right_tmp =
            ((root-&amp;gt;right &amp;amp;&amp;amp; root-&amp;gt;right-&amp;gt;val == root-&amp;gt;val) ? right : 0);
        luvp = max(luvp, 1 + left_tmp + right_tmp);
        return 1 + max(left_tmp, right_tmp);
    }
};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-html"&gt;
Status: Accepted (71/71)

Runtime: 184 ms, faster than 86.14% of C++ submissions.

Memory Usage: 72.6 MB, less than 5.21% of C++ submissions.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
第一次做的时候没有做出来，觉得有点复杂。不过说到底还只是一个简单的树遍历，当然可以认为和求树深度的那类题其实差不多。其中每个点的处理就是找到是否比现有的最长路径 &lt;code&gt;luvp&lt;/code&gt; 更长的 &lt;code&gt;1 + left_tmp + right_tmp&lt;/code&gt; ，然后返回的若是 &lt;code&gt;1 + left_tmp + right_tmp&lt;/code&gt; ，那么得出来的结果不是 &lt;b&gt;最长的path&lt;/b&gt; ，而是相同值最多的相邻点个数。所以最后修改一下，返回稍长的路径即可。
&lt;/p&gt;

&lt;p&gt;
树的题，递归是最简洁的。
&lt;/p&gt;&lt;/div&gt;</description><category>leetcode</category><guid>https://fpghwd.github.io/posts/leetcode687-longest-univalue-path/</guid><pubDate>Fri, 25 Sep 2020 13:21:48 GMT</pubDate></item></channel></rss>