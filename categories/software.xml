<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>wd's blog (Posts about software)</title><link>https://fpghwd.github.io/</link><description></description><atom:link href="https://fpghwd.github.io/categories/software.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2021 &lt;a href="mailto:ggwdwhu@gmail.com"&gt;Wang Ding&lt;/a&gt; </copyright><lastBuildDate>Fri, 19 Mar 2021 19:28:05 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Open-close principle</title><link>https://fpghwd.github.io/posts/open-close-principle/</link><dc:creator>Wang Ding</dc:creator><description>&lt;div&gt;&lt;p&gt;
开闭原则是软件工程中对于开发原则的一条描述。它规定：软件中的对象（类，模块，函数等等）应该对于拓展开放，对于修改封闭。这是一条非常重要的原则，它的内涵是：一个实体是允许在不改变它本身（的源代码）的前提下变更它的行为。
&lt;/p&gt;

&lt;p&gt;
这段话我所理解的是：只加不改。也就是对于一个能够运行正常的代码（或者说旧的系统），我们最好是添加一些需要的东西，而不是修改内部的机制。因为内部的机制牵连比较多，修改的时候也比较容易出现引用的问题。但是增加就不用想那么多，也实际上效果更好一点。
&lt;/p&gt;

&lt;p&gt;
对于旧的系统，我的一个理解也包含生活方式或者理念的系统。在接触到一个新的生活方式或者理念的时候，不要急着先否定过去的系统，而是加上去新的机制和理念。它们不应该是互斥存在的，而是可以友好的协作的。如果不行，那么只能说没有组织好。
&lt;/p&gt;

&lt;p&gt;
很有意思的一条原则，发散的话可以得到很多有价值的应用。
&lt;/p&gt;&lt;/div&gt;</description><category>software</category><guid>https://fpghwd.github.io/posts/open-close-principle/</guid><pubDate>Sun, 17 Jan 2021 11:33:03 GMT</pubDate></item></channel></rss>