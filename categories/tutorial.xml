<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>wd's blog (Posts about tutorial)</title><link>https://fpghwd.github.io/</link><description></description><atom:link href="https://fpghwd.github.io/categories/tutorial.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2021 &lt;a href="mailto:ggwdwhu@gmail.com"&gt;Wang Ding&lt;/a&gt; </copyright><lastBuildDate>Fri, 19 Mar 2021 19:28:05 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Tutorial to workstation</title><link>https://fpghwd.github.io/posts/tutorial-to-workstation/</link><dc:creator>Wang Ding</dc:creator><description>&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
代理
&lt;/p&gt;

&lt;p&gt;
目前最爽的解决方案是&lt;a href="https://www.imperva.com/learn/ddos/transparent-proxy/"&gt;透明代理&lt;/a&gt;。
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
SSHD
&lt;/p&gt;

&lt;p&gt;
开启服务器的 sshd 服务
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/SSH_(Secure_Shell)"&gt;SSH&lt;/a&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;a href="https://www.zsythink.net/archives/2450"&gt;ssh 隧道内网穿透&lt;/a&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;a href="https://zhuanlan.zhihu.com/p/34908698"&gt;ssh 内网穿透&lt;/a&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;实施条件

&lt;ul class="org-ul"&gt;
&lt;li&gt;公共 IP 主机（VPS），也称“&lt;a href="https://www.cnblogs.com/RXDXB/p/11491164.html"&gt;跳板机&lt;/a&gt;”&lt;/li&gt;

&lt;li&gt;需要访问的内网机器（待穿透的内网机器）能访问并 SSH 登录公共主机&lt;/li&gt;

&lt;li&gt;本地机器（访问内网机器的机器）能访问并 SSH 登录中间主机&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;实施过程

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
内网穿透到跳板机
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-bash"&gt;            ssh -qTfNn -R '[::]:22222:localhost:22' [Jump Server User]@[Jumper Server IP or Domain Name]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
本地机器访问内网机器
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-bash"&gt;            ssh -p 22222 [Remote User on machine on sub-network]@[Jump Server IP or Domain Name]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
&lt;a href="https://www.everythingcli.org/ssh-tunnelling-for-fun-and-profit-autossh/"&gt;autossh&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
autossh 是对 ssh 的增强，因此使用 ssh 隧道来进行内网穿透，仅使用 autossh 即可
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
登录
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;ssh user@hostname&lt;/code&gt;
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
无密码登录
&lt;/p&gt;

&lt;p&gt;
需要上传本地密钥到远程主机用户的 &lt;code&gt;~/.ssh/known_hosts&lt;/code&gt; 文件中
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;生成本地密钥 &lt;code&gt;ssh-keygen&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;上传本地密钥 &lt;code&gt;ssh-copy-id&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;更快登录

&lt;ol class="org-ol"&gt;
&lt;li&gt;设置 &lt;code&gt;.ssh/config&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;文件传输

&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;p&gt;
采用 &lt;a href="https://filezilla-project.org/"&gt;Filezilla&lt;/a&gt; 传输文件
&lt;/p&gt;

&lt;p&gt;
最方便的一种方式，根据 ssh 信息来配置即可
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
采用 &lt;a href="https://man7.org/linux/man-pages/man1/scp.1.html"&gt;scp&lt;/a&gt; 传输少量文件
&lt;/p&gt;

&lt;p&gt;
在实现 ssh 免密码的基础上，在命令行 &lt;code&gt;scp [filename] [remote-host]&lt;/code&gt; 即可
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
采用 &lt;a href="https://git-scm.com/docs/user-manual"&gt;git&lt;/a&gt; 同步文件
&lt;/p&gt;

&lt;p&gt;
需要 git 操作基础
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;运行代码

&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;p&gt;
python 运行脚本
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;python test.py&lt;/code&gt;
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;脚本参数

&lt;ol class="org-ol"&gt;
&lt;li&gt;参考 &lt;a href="https://www.tutorialspoint.com/python/python_command_line_arguments.htm"&gt;python 参数使用&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
脚本循环
&lt;/p&gt;

&lt;p&gt;
有时需要跑一个耗时较长的程序，写一个脚本在 python 运行时传入参数来自动化程序运行
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-bash"&gt;
#!/bin/bash
# cmd='nohup python -u ga_kpca.py &amp;gt; "log/ga-custom-kernel-kpca_"$(date "+%Y-%m-%d_%H-%M-%S").log 2&amp;gt;&amp;amp;1'

cd ~/wangding/ga-kpca
conda activate "wangding"

for i in $(seq 2 7)
do
    for j in $(seq 2 7)
    do
        nohup python -u ga_kpca.py $i $j &amp;gt; "log/ga-custom-kernel-kpca_"$(date "+%Y-%m-%d_%H-%M-%S").log 2&amp;gt;&amp;amp;1
    done
done

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
其中 &lt;code&gt;$i&lt;/code&gt; 和 &lt;code&gt;$j&lt;/code&gt; 就是在 bash 中传入 python 的参数，参数可以结合具体代码逻辑做任何事情。
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
后台运行
&lt;/p&gt;

&lt;p&gt;
后台运行在命令后面加入 &lt;code&gt;&amp;amp;&lt;/code&gt; ，也即命令成为 &lt;code&gt;python test.py &amp;amp;&lt;/code&gt; 即可。
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
存储日志
&lt;/p&gt;

&lt;p&gt;
在代码中，在关键信息的地方打印日志即可。
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
存储图像
&lt;/p&gt;

&lt;p&gt;
代码在后台运行时，无需使用 &lt;code&gt;matplotlib.show()&lt;/code&gt; 来查看图像，因此保存 &lt;code&gt;matlplotlib.savefig(filename=filename)&lt;/code&gt; 即可。
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;打印关键信息和保存日志以及查看日志
&lt;ol class="org-ol"&gt;
&lt;li&gt;打印日志
&lt;ol class="org-ol"&gt;
&lt;li&gt;代码中添加需要打印的信息&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;保存日志
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;p&gt;
使用文件重定向
&lt;/p&gt;

&lt;p&gt;
例如 &lt;code&gt;python test.py &amp;gt; log.txt&lt;/code&gt;
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
同时将错误信息重定向
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;2&amp;gt;&amp;amp;1&lt;/code&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;查看日志
&lt;ol class="org-ol"&gt;
&lt;li&gt;使用 &lt;a href="https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=&amp;amp;ved=2ahUKEwiWkLuoytbtAhWCc30KHSz2AAUQFjAAegQIARAD&amp;amp;url=https%3A%2F%2Fwww.jetbrains.com%2Fpycharm%2F&amp;amp;usg=AOvVaw08gOuiX9h_nAkWJhXYmZeT"&gt;Pycharm&lt;/a&gt; 设置 &lt;a href="https://www.jetbrains.com/help/pycharm/creating-a-remote-server-configuration.html"&gt;sftp&lt;/a&gt; 来查看文件，最方便&lt;/li&gt;

&lt;li&gt;ssh 登录远程机器，然后使用 &lt;code&gt;more&lt;/code&gt; or &lt;code&gt;less&lt;/code&gt; 命令查看&lt;/li&gt;

&lt;li&gt;&lt;a href="https://www.gnu.org/software/emacs/"&gt;Emacs&lt;/a&gt; 的 &lt;a href="https://www.emacswiki.org/emacs/TrampMode"&gt;tramp&lt;/a&gt;, 次方便。&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;</description><category>tutorial</category><guid>https://fpghwd.github.io/posts/tutorial-to-workstation/</guid><pubDate>Fri, 18 Dec 2020 02:46:19 GMT</pubDate></item></channel></rss>