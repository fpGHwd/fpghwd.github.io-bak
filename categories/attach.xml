<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>WD's BLOG (Posts about ATTACH)</title><link>https://fpghwd.github.io/</link><description></description><atom:link href="https://fpghwd.github.io/categories/attach.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2021 &lt;a href="mailto:ggwdwhu@gmail.com"&gt;Wang Ding&lt;/a&gt; </copyright><lastBuildDate>Sun, 14 Mar 2021 13:41:50 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Macos 下使用终端 emacs 而不使用 GUI emacs</title><link>https://fpghwd.github.io/posts/macos-xia-shi-yong-zhong-duan-emacs-er-bu-shi-yong-gui-emacs/</link><dc:creator>Wang Ding</dc:creator><description>&lt;div&gt;&lt;p&gt;
最近在 macos 下使用 ssh 登录开启 daemon 启动的 emacs 后用 &lt;code&gt;emacsclient -nw&lt;/code&gt; 连接，感觉体验舒服了很多。
&lt;/p&gt;

&lt;p&gt;
主要说来有以下好处：
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;不同同步配置。每次如果修改配置文件后，还需要先等文件同步好后 doom sync 然后 doom update 再 doom doctor 一次，虽然文件同步时间不需要很长时间，但是还是要等。有时文件没有同步好还得使用 ediff 合并文件（ediff 合并很好用）然后删除旧文件。&lt;/li&gt;
&lt;li&gt;不用为 macos emacs 重新配置输入法，所有都是 emacs daemon 中的输入法（ps: emacs 内置输入法 emacs-rime 真的很好用，在终端也很不错）&lt;/li&gt;
&lt;li&gt;不用考虑在终端 emacs 很多其他的东西：比如图片显示，什么 w3m ，图片都不用想了，只用考虑“搜索——编辑”文件就行了。我觉得作为一个编辑器就应该做编辑器的事情，不应该做其他的事情，比如说在 emacs 考虑显示图片、网页浏览等等。&lt;/li&gt;
&lt;li&gt;不用考虑同步其他文件。所有的操作在服务器上执行，虽然中间服务器延迟还是有一点，但是一般来说不影响使用。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
不会因为穷而不能享受到更不卡的 emacs on mac 。我使用的是 macbook air ，使用的核心还是双核 i3 （暴哭），其实主要是因为穷。。。当然这样的话，就放宽了运行 emacs 的服务器的限制了。macbook air 只要负责有个好看的终端就行了。
&lt;/p&gt;


&lt;div id="org9a94220" class="figure"&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/fpGHwd/fpghwd.github.io/master/images/_20210314_165839screenshot.png" alt="_20210314_165839screenshot.png"&gt;
&lt;/p&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
大体来说，终端 emacs 可以让用户专心写文字，而不用考虑其他的功能了，当我想通了这一点后就感觉就算有了 macbook pro 我可能还是会用终端 emacs 的。相信我，终端 emacs 我们值得拥有！
&lt;/p&gt;

&lt;div id="org71b0edb" class="figure"&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/fpGHwd/fpghwd.github.io/master/images/_20210314_214140screenshot.png" alt="_20210314_214140screenshot.png"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
测试测试
&lt;/p&gt;&lt;/div&gt;</description><category>ATTACH</category><category>emacs</category><guid>https://fpghwd.github.io/posts/macos-xia-shi-yong-zhong-duan-emacs-er-bu-shi-yong-gui-emacs/</guid><pubDate>Sun, 14 Mar 2021 08:59:06 GMT</pubDate></item><item><title>Turn to archlinux</title><link>https://fpghwd.github.io/posts/turn-to-archlinux/</link><dc:creator>Wang Ding</dc:creator><description>&lt;div&gt;&lt;p&gt;
昨天晚上新装了 archlinux ，目前基本已经能用了。
&lt;/p&gt;

&lt;p&gt;
其实并没有太多理由非要用 archlinux 。 openSUSE 用得还行，唯二让我换的理由是：1. fcitx-rime 出了一点问题，用了一段时间后，虽然切换到中文，但是无法打出中文。 2. 装各种包有点麻烦。这点 archlinux 可以说完全解决痛点。
&lt;/p&gt;

&lt;p&gt;
早就想换，昨天晚上干脆就下定决心借来了 U 盘开始装 archlinux 。全程也没有花费太多时间（也就十多个小时吧。
&lt;/p&gt;

&lt;div id="orgf88e358" class="figure"&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/fpGHwd/fpghwd.github.io/master/images/_20210104_190229screenshot.png" alt="_20210104_190229screenshot.png"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
装好了之后，装上了 xfce 桌面，emacs 启动速度也很快，用起来两个字：开心。
&lt;/p&gt;

&lt;p&gt;
虽然还有一些配置文件还没有搬运过来，直接挂载上了 openSUSE 的之前 home 目录，后面想到了就再配置。
&lt;/p&gt;&lt;/div&gt;</description><category>ATTACH</category><guid>https://fpghwd.github.io/posts/turn-to-archlinux/</guid><pubDate>Mon, 04 Jan 2021 11:35:21 GMT</pubDate></item><item><title>第一场雪</title><link>https://fpghwd.github.io/posts/di-yi-chang-xue/</link><dc:creator>Wang Ding</dc:creator><description>&lt;div&gt;&lt;p&gt;
2020 年的第一场雪，比去年来得要早一些。
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://raw.githubusercontent.com/fpGHwd/fpghwd.github.io/master/images/_20201214_193136IMG_20201212_132726_export_1.jpg"&gt;宿舍外&lt;/a&gt;
&lt;/p&gt;&lt;/div&gt;</description><category>ATTACH</category><category>life</category><category>mathjax</category><guid>https://fpghwd.github.io/posts/di-yi-chang-xue/</guid><pubDate>Mon, 14 Dec 2020 01:52:05 GMT</pubDate></item><item><title>openSUSE 上 mariadb 的使用</title><link>https://fpghwd.github.io/posts/opensuse-shang-mariadb-de-shi-yong/</link><dc:creator>Wang Ding</dc:creator><description>&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
缘起
&lt;/p&gt;

&lt;p&gt;
因为论文做实验要用到数据库，虽然有个远程的数据库可以使用，但是还是想在本地装一个数据库。使用的是 openSUSE Tumbleweed.
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
安装使用
&lt;/p&gt;

&lt;p&gt;
在装系统的时候应该已经安装了 mariadb, 但是登录 &lt;code&gt;mysql -u root -p&lt;/code&gt; 的时候总是提示： &lt;code&gt;ERROR 2002 (HY000): Can't connect to local MySQL server through socket '/run/mysql/mysql.sock (2)'&lt;/code&gt;
&lt;/p&gt;


&lt;div id="org05ad9d2" class="figure"&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/fpGHwd/fpghwd.github.io/master/images/_20201129_160638screenshot.png" alt="_20201129_160638screenshot.png"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
不过也可能是因为密码错误，准备&lt;a href="https://www.jianshu.com/p/7f508027419a"&gt;重置密码&lt;/a&gt;后跳过密码登录，但是依然出现这个提示。
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
mysql 用户组
&lt;/p&gt;

&lt;p&gt;
后来想到可能是用户组的原因，于是在 yast/Users 中将自己的用户加入 mysql 用户组。
&lt;/p&gt;


&lt;div id="orgb1ae3a8" class="figure"&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/fpGHwd/fpghwd.github.io/master/images/_20201129_160825screenshot.png" alt="_20201129_160825screenshot.png"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
尝试登录后提示密码错误。应该是可以了。
&lt;/p&gt;


&lt;div id="org838d0bd" class="figure"&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/fpGHwd/fpghwd.github.io/master/images/_20201129_160845screenshot.png" alt="_20201129_160845screenshot.png"&gt;
&lt;/p&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;</description><category>ATTACH</category><category>openSUSE</category><guid>https://fpghwd.github.io/posts/opensuse-shang-mariadb-de-shi-yong/</guid><pubDate>Sun, 29 Nov 2020 08:09:05 GMT</pubDate></item><item><title>Org archive location</title><link>https://fpghwd.github.io/posts/org-archive-location/</link><dc:creator>Wang Ding</dc:creator><description>&lt;div&gt;&lt;p&gt;
最近在使用 org 的时候想把 org-archive-subtree 的条目和 org-capture-templates 那样，将每次当天 archived 的 headline 放到当日的日期 headline 下面，和日记一样组织。这样的话，将来查询的时候就可以顺便看一下当天发生的事情和当天完成的项目了。
&lt;/p&gt;

&lt;p&gt;
以下是日记的组织方式：
&lt;/p&gt;

&lt;div id="org595b26c" class="figure"&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/fpGHwd/fpghwd.github.io/master/images/_20201016_192526screenshot.png" alt="_20201016_192526screenshot.png"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;
(add-to-list 'org-capture-templates
                      '("zj" "journal" entry (file "/home/wd/dropbox/to-encfs/text/org/journal.org")
                        "* %u - %^{heading}\n  %?"))

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
同时在 &lt;code&gt;customize org-archive-location&lt;/code&gt; 中发现了有这种设定：
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-html"&gt;
"~/org/datetree.org::datetree/* Finished Tasks"
The "datetree/" string is special, signifying to archive
items to the datetree.  Items are placed in either the CLOSED
date of the item, or the current date if there is no CLOSED date.
The heading will be a subentry to the current date.  There doesn’t
need to be a heading, but there always needs to be a slash after
datetree.  For example, to store archived items directly in the
datetree, use "~/org/datetree.org::datetree/".

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
可以把日记和归档的条目都放到一个文件，归档也不会经常去动，只需要看的时候搜索一下就行。
&lt;/p&gt;&lt;/div&gt;</description><category>ATTACH</category><category>emacs</category><guid>https://fpghwd.github.io/posts/org-archive-location/</guid><pubDate>Fri, 16 Oct 2020 11:32:18 GMT</pubDate></item><item><title>调试的时候出了一个问题</title><link>https://fpghwd.github.io/posts/diao-shi-de-shi-hou-chu-le-yi-ge-wen-ti/</link><dc:creator>Wang Ding</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;a href="https://leetcode.com/problems/shortest-distance-to-a-character/"&gt;821. Shortest Distance to a Character&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
一个 gdb 调试的问题，没太看明白（暴哭）：
&lt;/p&gt;

&lt;div id="org47f0e90" class="figure"&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/fpGHwd/fpghwd.github.io/master/images/_20200925_132117screenshot.png" alt="_20200925_132117screenshot.png"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
想到可能是类型的问题： &lt;code&gt;size_type&lt;/code&gt; 是一个无符号的整数， &lt;code&gt;int&lt;/code&gt; 是有符号整数，有符号整数首先转换成无符号整数。 &lt;code&gt;-1&lt;/code&gt; 转化成 &lt;code&gt;0xffffffff&lt;/code&gt; ，所以应该是没有问题的。虽然是自己偷懒设置了一个 -1 索引的变量其实是为了后面 for 能从 0 开始遍历。如果从初始值设置为 0 的话应该不会出这样的问题。
&lt;/p&gt;

&lt;p&gt;
同时有一个问题：转化时为什么是有符号整数转换成无符号整数，而不是相反呢？
&lt;/p&gt;&lt;/div&gt;</description><category>ATTACH</category><category>leetcode</category><guid>https://fpghwd.github.io/posts/diao-shi-de-shi-hou-chu-le-yi-ge-wen-ti/</guid><pubDate>Fri, 25 Sep 2020 05:22:42 GMT</pubDate></item><item><title>Org2nikola image displaying</title><link>https://fpghwd.github.io/posts/org2nikola-image-display/</link><dc:creator>Wang Ding</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;b&gt;设置&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
先&lt;a href="https://github.com/redguardtoo/org2nikola/issues/11"&gt;咨询&lt;/a&gt;了作者，然后得到了思路：获得一个对 output html 进行自定义 render 的函数，然后自定义修改 html 。
&lt;/p&gt;

&lt;p&gt;
设置 org2nikola 包变量的 &lt;code&gt;org2nikola-process-output-html-function&lt;/code&gt; 为：
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;
(setq org2nikola-process-output-html-function
 (lambda (html-text title post-slug)
   (progn (let* ((re-str "\\/home\\/.+?\\.\\(png\\|jpg\\|jpeg\\|bmp\\)"))
            (let* ((files-list (s-match-strings-all re-str html-text)))
              (dolist (file-path files-list)
                (message (format "file-path: %s" (car file-path)))
                (setq cmd (format "cp %s /home/wd/.config/nikola/images/" (car file-path)))
                (message cmd)
                (shell-command cmd))))
          (replace-regexp-in-string
           "file:.+?\\/[a-z0-9-]\\{34\\}\\/"
           "https://raw.githubusercontent.com/fpGHwd/fpghwd.github.io/master/images/"
           html-text))))

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
其中用到了 &lt;code&gt;s-match-strings-all&lt;/code&gt; 和 &lt;code&gt;replace-regexp-in-string&lt;/code&gt; 两个函数。
&lt;/p&gt;

&lt;p&gt;
整个过程中最重要的还是匹配文件地址和修改 github 图片资源 url 的两个正则表达式。我需要匹配字符串的是（目前只能匹配一个字符串，如果贴文本的话，写好博客后进行处理后面的真正图片的链接就不能进行转换了，所以用图片代替）：
&lt;code&gt;找不到图片了算了)○(￣□￣○)&lt;/code&gt; 。
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;获取图片地址&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
我需要将图片的地址拿到并复制到 nikola/images 目录，这样 nikola 在发布的时候会对图片做一些处理，然后输出到 output/images 中。使用的正则是 &lt;code&gt;\\/home\\/.+?\\.\\(png\\|jpg\\|jpeg\\|bmp\\)&lt;/code&gt; 。
&lt;/p&gt;

&lt;div id="org69cde4d" class="figure"&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/fpGHwd/fpghwd.github.io/master/images/_20200918_123005screenshot.png" alt="_20200918_123005screenshot.png"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;b&gt;替换图片地址&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
我需要将形如 &lt;code&gt;file:///home/wd/Dropbox/text/org/.attach/(HashI/(UUID)/&lt;/code&gt; 的所有字符串替换为 &lt;code&gt;https://raw.githubusercontent.com/fpGHwd/fpghwd.github.io/master/images/&lt;/code&gt; ，使用的正则是 &lt;code&gt;"file:.+?\\/[a-z0-9-]\\{34\\}\\/&lt;/code&gt; 。
&lt;/p&gt;

&lt;div id="orgd2806f2" class="figure"&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/fpGHwd/fpghwd.github.io/master/images/_20200918_122914screenshot.png" alt="_20200918_122914screenshot.png"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;b&gt;调试正则&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
用到了 emacs 自带的 &lt;code&gt;re-builder&lt;/code&gt; 来对当前 buffer 测试正则表达式，很好用。
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;TODO&lt;/b&gt;
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;由于没有循环，只能找到第一个图片的字符串然后替换成真实的 url, 需要完善匹配后的操作。（完成）&lt;/li&gt;
&lt;li&gt;还只能匹配截图这样文件名的图片，需要完善正则表达式。（完成）&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;</description><category>ATTACH</category><category>emacs</category><guid>https://fpghwd.github.io/posts/org2nikola-image-display/</guid><pubDate>Thu, 17 Sep 2020 03:35:39 GMT</pubDate></item><item><title>No news is good news</title><link>https://fpghwd.github.io/posts/no-news-is-good-news/</link><dc:creator>Wang Ding</dc:creator><description>&lt;div&gt;&lt;p&gt;
今天看书看到了在如何在应用程序中加载/链接共享库，书中以高性能 Web 服务器的例子来说明，对于一个繁忙的网站，运行时加载和链接共享库对于服务质量的提升意义重大。
&lt;/p&gt;

&lt;p&gt;
加载和链接共享库用到的是 &lt;code&gt;dlfcn.h&lt;/code&gt; 中的 &lt;code&gt;dlopen/dlsym/dlclose&lt;/code&gt; 的三个函数。还有最后一个检查前面三个调用情况的函数： &lt;code&gt;dlerror&lt;/code&gt; ，声明为：
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-cpp"&gt;const char *dlerror(void);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/fpGHwd/fpghwd.github.io/master/images/_20200825_110429screenshot.png" alt="_20200825_110429screenshot.png"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
如果调用前三个函数没有发生错误，则返回NULL。我想起了以前看过的K&amp;amp;R的函数返回值如果为0则是运行成功，当时还特意想着为什么这么来设计，还学到了标题的那句话“没有消息就是好消息”。
&lt;/p&gt;

&lt;p&gt;
当然其实要说：“成功都是一样的，失败各有各的不同的原因”也是没有问题的，毕竟比“失败都是一样的，成功各有各的不同”这句话要更为实诚一点。我觉得这说明从失败中获取原因是有价值的，而从成功中找原因应该没有什么大的价值吧。怎么回事，好像顺手黑了成功学一把，这不是我的本意。
&lt;/p&gt;&lt;/div&gt;</description><category>ATTACH</category><category>csapp</category><guid>https://fpghwd.github.io/posts/no-news-is-good-news/</guid><pubDate>Tue, 25 Aug 2020 02:52:31 GMT</pubDate></item></channel></rss>