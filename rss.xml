<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>wd's blog</title><link>https://fpghwd.github.io/</link><description>passion, love and music</description><atom:link href="https://fpghwd.github.io/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2021 &lt;a href="mailto:ggwdwhu@gmail.com"&gt;Wang Ding&lt;/a&gt; </copyright><lastBuildDate>Thu, 25 Mar 2021 03:53:10 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>leetcode 1013. Partion Array Into Three Parts With Equal Sum</title><link>https://fpghwd.github.io/posts/leetcode-1013-partion-array-into-three-parts-with-equal-sum/</link><dc:creator>Wang Ding</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;a href="https://leetcode.com/problems/partition-array-into-three-parts-with-equal-sum/"&gt;1013. Partition Array Into Three Parts With Equal Sum&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
数组可以分成三部分和相等的块，那么数组的总和应该符合 &lt;code&gt;sum mod 3 = 0&lt;/code&gt; 。找到部分和的值，然后从和数组中找出 &lt;code&gt;1*(sum/3)&lt;/code&gt; 和 &lt;code&gt;2*(sum/3)&lt;/code&gt; 即可。
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-java"&gt;
class Solution {
    public boolean canThreePartsEqualSum(int[] arr) {
        int length = arr.length;
        int[] sum = new int[length];
        int i = 0;
        for(int a:arr){
            if(i != 0)sum[i] = sum[i-1] + a;
            else sum[i] = a;
            i++;
        }

        if(sum[length-1] %3 != 0)return false;
        i = 0;
        for(; i &amp;lt; length; i++){
            if(sum[i] == sum[length-1]/3)break;
        }
        if(i &amp;gt;= length)return false;
        for(i++; i &amp;lt; length; i++){
            if(sum[i] == 2 * sum[length-1]/3)break;
        }
        if(i &amp;gt;= length-1)return false;
        return true;
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;&lt;/div&gt;</description><guid>https://fpghwd.github.io/posts/leetcode-1013-partion-array-into-three-parts-with-equal-sum/</guid><pubDate>Thu, 25 Mar 2021 03:46:02 GMT</pubDate></item><item><title>leetcode 98 Validate Binary Search Tree</title><link>https://fpghwd.github.io/posts/leetcode-98-validate-binary-search-tree/</link><dc:creator>Wang Ding</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;a href="https://leetcode.com/problems/validate-binary-search-tree/"&gt;Leetcode 98. Validate Binary Search Tree&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
树的题目一般可以用递归来完成，这道题也不例外。使用中序遍历判断父结点和子结点的关系即可。
&lt;/p&gt;

&lt;p&gt;
另外每次递归时，作为当前已经是 root 的左结点，需要判断它的右子结点是否超过 root 的父结点的值。同时，作为当前是 root 的右结点，需要判断它的左子结点是否超过 root 的父结点的值。
&lt;/p&gt;

&lt;p&gt;
边界的处理主要是结点可能是整数的最大和最小值。
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-java"&gt;
public class Solution {
    public  boolean isValidBST(TreeNode root) {
        return isValidBST(root,Long.MIN_VALUE , Long.MAX_VALUE);
    }

    public  boolean isValidBST(TreeNode root , double lowerLimit, double upperLimit) {
        if(root == null) return true;
        if(root.val &amp;lt;= lowerLimit|| root.val &amp;gt;= upperLimit ) return false ;
        return isValidBST(root.right , root.val , upperLimit) &amp;amp;&amp;amp; isValidBST(root.left , lowerLimit , root.val);
    }

    public static void main(String[] args){
        System.out.print("hello, world");
    }
}

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode() {}
    TreeNode(int val) { this.val = val; }
    TreeNode(int val, TreeNode left, TreeNode right) {
        this.val = val;
        this.left = left;
        this.right = right;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;&lt;/div&gt;</description><guid>https://fpghwd.github.io/posts/leetcode-98-validate-binary-search-tree/</guid><pubDate>Thu, 25 Mar 2021 03:22:46 GMT</pubDate></item><item><title>朋友来看我</title><link>https://fpghwd.github.io/posts/peng-you-lai-kan-wo/</link><dc:creator>Wang Ding</dc:creator><description>&lt;div&gt;&lt;p&gt;
今天好久没来看我的朋友过来看我，出去走了好久，好久没有出去呼吸下新鲜空气了。
&lt;/p&gt;

&lt;div id="org90eb6ec" class="figure"&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/fpGHwd/fpghwd.github.io/master/images/_20210323_201102screenshot.png" alt="_20210323_201102screenshot.png"&gt;
&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>ATTACH</category><guid>https://fpghwd.github.io/posts/peng-you-lai-kan-wo/</guid><pubDate>Tue, 23 Mar 2021 12:11:25 GMT</pubDate></item><item><title>Warm and soft heart</title><link>https://fpghwd.github.io/posts/warm-and-soft-heart/</link><dc:creator>Wang Ding</dc:creator><description>&lt;div&gt;&lt;p&gt;
下午在光谷等公交的时候，一直下着小雨的天突然就下了一阵大雨，然后前面的一个打着黄伞的女孩为一个没带伞的陌生男人撑伞。突然就觉得很暖啊，来自陌生人的关爱。虽然男人很快离开去找躲雨的地方，可能也没有注意到自己身后的女孩为他撑了一下伞，但是我感受到了！
&lt;/p&gt;

&lt;div id="org84d70cb" class="figure"&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/fpGHwd/fpghwd.github.io/master/images/_20210320_025417screenshot.png" alt="_20210320_025417screenshot.png"&gt;
&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>ATTACH</category><guid>https://fpghwd.github.io/posts/warm-and-soft-heart/</guid><pubDate>Fri, 19 Mar 2021 18:54:51 GMT</pubDate></item><item><title>Happiness isn't something you find, it's something you build.</title><link>https://fpghwd.github.io/posts/happiness-isn-t-something-you-find-it-s-something-you-build/</link><dc:creator>Wang Ding</dc:creator><description>&lt;div&gt;&lt;div id="org78f7d7e" class="figure"&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/fpGHwd/fpghwd.github.io/master/images/_20210319_134136screenshot.png" alt="_20210319_134136screenshot.png"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
Fairly speaking, it’s the truth that happiness is not searching but building.&lt;/p&gt;&lt;/div&gt;</description><category>ATTACH</category><guid>https://fpghwd.github.io/posts/happiness-isn-t-something-you-find-it-s-something-you-build/</guid><pubDate>Fri, 19 Mar 2021 05:45:07 GMT</pubDate></item><item><title>不管怎样，我们都应该和过去和解</title><link>https://fpghwd.github.io/posts/bu-guan-zen-yang-wo-men-dou-ying-gai-he-guo-qu-he-jie/</link><dc:creator>Wang Ding</dc:creator><description>&lt;p&gt;
看越哥说电影的&lt;a href="https://www.youtube.com/watch?v=XY7Pz9AG6T4"&gt;《忘不了》&lt;/a&gt;，里面的一句话个人觉得非常好，“不管怎样，我们都应该和过去和解”，这也是和过去解耦的一种形式，「活在当下」才是应该做的。
&lt;/p&gt;</description><guid>https://fpghwd.github.io/posts/bu-guan-zen-yang-wo-men-dou-ying-gai-he-guo-qu-he-jie/</guid><pubDate>Wed, 17 Mar 2021 02:14:02 GMT</pubDate></item><item><title>Macos 下用终端 emacs 而不使用 GUI emacs</title><link>https://fpghwd.github.io/posts/macos-xia-shi-yong-zhong-duan-emacs-er-bu-shi-yong-gui-emacs/</link><dc:creator>Wang Ding</dc:creator><description>&lt;div&gt;&lt;p&gt;
最近在 macos 下使用 ssh 登录开启 daemon 启动的 emacs 后用 &lt;code&gt;emacsclient -nw&lt;/code&gt; 连接，感觉体验舒服了很多。
&lt;/p&gt;

&lt;p&gt;
主要说来有以下好处：
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;不同同步配置。每次如果修改配置文件后，还需要先等文件同步好后 doom sync 然后 doom update 再 doom doctor 一次，虽然文件同步时间不需要很长时间，但是还是要等。有时文件没有同步好还得使用 ediff 合并文件（ediff 合并很好用）然后删除旧文件。&lt;/li&gt;
&lt;li&gt;不用为 macos emacs 重新配置输入法，所有都是 emacs daemon 中的输入法（ps: emacs 内置输入法 emacs-rime 真的很好用，在终端也很不错）&lt;/li&gt;
&lt;li&gt;不用考虑在终端 emacs 很多其他的东西：比如图片显示，什么 w3m ，图片都不用想了，只用考虑“搜索——编辑”文件就行了。我觉得作为一个编辑器就应该做编辑器的事情，不应该做其他的事情，比如说在 emacs 考虑显示图片、网页浏览等等。&lt;/li&gt;
&lt;li&gt;不用考虑同步其他文件。所有的操作在服务器上执行，虽然中间服务器延迟还是有一点，但是一般来说不影响使用。&lt;/li&gt;
&lt;li&gt;不用在乎编辑的状态，即使断网了也能很快连接进来，打开的 buffer 和其编辑状态都还在。&lt;/li&gt;
&lt;li&gt;连接速度快，秒连&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
不会因为穷而不能享受到更不卡的 emacs on mac 。我使用的是 macbook air ，使用的核心还是双核 i3 （暴哭），其实主要是因为穷。。。当然这样的话，就放宽了运行 emacs 的服务器的限制了。macbook air 只要负责有个好看的终端就行了。
&lt;/p&gt;


&lt;div id="org070e709" class="figure"&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/fpGHwd/fpghwd.github.io/master/images/_20210314_165839screenshot.png" alt="_20210314_165839screenshot.png"&gt;
&lt;/p&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
缺点也有：
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;无法处理图片，elfeed 有很多图片的内容，以及 telega 的图片无法显示&lt;/li&gt;
&lt;li&gt;字体是终端字体，无法通过修改配置的字体来变换字体&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
大体来说，终端 emacs 可以让用户专心写文字，而不用考虑其他的功能了，当我想通了这一点后就感觉就算有了 macbook pro 我可能还是会用终端 emacs 的。相信我，终端 emacs 我们值得拥有！
&lt;/p&gt;&lt;/div&gt;</description><category>ATTACH</category><category>emacs</category><guid>https://fpghwd.github.io/posts/macos-xia-shi-yong-zhong-duan-emacs-er-bu-shi-yong-gui-emacs/</guid><pubDate>Sun, 14 Mar 2021 08:59:06 GMT</pubDate></item><item><title>Macos 下使用 Squirrel 在 vscode 中无法输入中文</title><link>https://fpghwd.github.io/posts/macos-xia-shi-yong-squirrel-zai-vscode-zhong-wu-fa-shu-ru-zhong-wen/</link><dc:creator>Wang Ding</dc:creator><description>&lt;div&gt;&lt;p&gt;
因为 macbook 中写 latex 有点卡，实际我现在的配置，只要编辑稍长的文件多多少少在 macbook air 上有点卡，体验没有 arch 的好。但是 arch 又没有 macbook 那么好的屏幕。也 profiler 了一下，主要时间用在了 native 函数中，感觉是 emacs 版本的问题。
&lt;/p&gt;

&lt;p&gt;
于是下载了 vscode + tex workshop 插件和全套的 mactex ，vscode 编辑起来还是流畅一点。不过 vscode 在切换 Squirrel 中文输入时不能使用，重新修改了 patch 也不行。不过还有系统的中文输入法还能用，全拼用起来果然没有双拼舒服。
&lt;/p&gt;&lt;/div&gt;</description><guid>https://fpghwd.github.io/posts/macos-xia-shi-yong-squirrel-zai-vscode-zhong-wu-fa-shu-ru-zhong-wen/</guid><pubDate>Wed, 10 Mar 2021 07:26:04 GMT</pubDate></item><item><title>Macos emacs-plus@27 is convenient with emacs-rime</title><link>https://fpghwd.github.io/posts/macos-emacs-plus27-is-convenient-with-emacs-rime/</link><dc:creator>Wang Ding</dc:creator><description>&lt;p&gt;
不知道是不是自己的配置问题，使用相同的配置 &lt;code&gt;emacs-plus@28 --with-native-comp&lt;/code&gt; 就会卡顿，退回 emacs-plus@27 就还好。重新编译了一遍 doom-emacs 的 modules 后，感觉 emacs-rime 在编辑 org 文件时没有编译前那么卡了。
&lt;/p&gt;</description><category>emacs</category><guid>https://fpghwd.github.io/posts/macos-emacs-plus27-is-convenient-with-emacs-rime/</guid><pubDate>Wed, 03 Mar 2021 07:56:33 GMT</pubDate></item><item><title>Emacs mouse or touchpad scroll line by line</title><link>https://fpghwd.github.io/posts/emacs-mouse-or-touchpad-scroll-line-by-line/</link><dc:creator>Wang Ding</dc:creator><description>&lt;div&gt;&lt;p&gt;
Just set &lt;code&gt;mouse-wheel-progressive-speed&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt; in init file.
&lt;/p&gt;

&lt;p&gt;
如果需要的话，也可以在对下面进行设置，不过我觉得有了上面的设置已经差不多了。关于 &lt;code&gt;mouse-wheel-progressive-speed&lt;/code&gt; 的解释是：
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
If non-nil, the faster the user moves the wheel, the faster the scrolling.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
另外下面的设置也可以考虑一下：
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-emacs"&gt;(setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
(setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
(setq scroll-step 1) ;; keyboard scroll one line at a time
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;&lt;/div&gt;</description><category>emacs</category><guid>https://fpghwd.github.io/posts/emacs-mouse-or-touchpad-scroll-line-by-line/</guid><pubDate>Sun, 14 Feb 2021 12:06:23 GMT</pubDate></item></channel></rss>