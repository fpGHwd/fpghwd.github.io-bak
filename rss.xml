<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>WD's BLOG</title><link>https://fpghwd.github.io/</link><description>passion, love and music</description><atom:link href="https://fpghwd.github.io/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2021 &lt;a href="mailto:ggwdwhu@gmail.com"&gt;Wang Ding&lt;/a&gt; </copyright><lastBuildDate>Sun, 14 Mar 2021 14:27:56 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Macos 下用终端 emacs 而不使用 GUI emacs</title><link>https://fpghwd.github.io/posts/macos-xia-shi-yong-zhong-duan-emacs-er-bu-shi-yong-gui-emacs/</link><dc:creator>Wang Ding</dc:creator><description>&lt;div&gt;&lt;p&gt;
最近在 macos 下使用 ssh 登录开启 daemon 启动的 emacs 后用 &lt;code&gt;emacsclient -nw&lt;/code&gt; 连接，感觉体验舒服了很多。
&lt;/p&gt;

&lt;p&gt;
主要说来有以下好处：
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;不同同步配置。每次如果修改配置文件后，还需要先等文件同步好后 doom sync 然后 doom update 再 doom doctor 一次，虽然文件同步时间不需要很长时间，但是还是要等。有时文件没有同步好还得使用 ediff 合并文件（ediff 合并很好用）然后删除旧文件。&lt;/li&gt;
&lt;li&gt;不用为 macos emacs 重新配置输入法，所有都是 emacs daemon 中的输入法（ps: emacs 内置输入法 emacs-rime 真的很好用，在终端也很不错）&lt;/li&gt;
&lt;li&gt;不用考虑在终端 emacs 很多其他的东西：比如图片显示，什么 w3m ，图片都不用想了，只用考虑“搜索——编辑”文件就行了。我觉得作为一个编辑器就应该做编辑器的事情，不应该做其他的事情，比如说在 emacs 考虑显示图片、网页浏览等等。&lt;/li&gt;
&lt;li&gt;不用考虑同步其他文件。所有的操作在服务器上执行，虽然中间服务器延迟还是有一点，但是一般来说不影响使用。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
不会因为穷而不能享受到更不卡的 emacs on mac 。我使用的是 macbook air ，使用的核心还是双核 i3 （暴哭），其实主要是因为穷。。。当然这样的话，就放宽了运行 emacs 的服务器的限制了。macbook air 只要负责有个好看的终端就行了。
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://fpghwd.github.io/posts/macos-xia-shi-yong-zhong-duan-emacs-er-bu-shi-yong-gui-emacs/_20210314_165839screenshot.png"&gt;_20210314_165839screenshot.png&lt;/a&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
大体来说，终端 emacs 可以让用户专心写文字，而不用考虑其他的功能了，当我想通了这一点后就感觉就算有了 macbook pro 我可能还是会用终端 emacs 的。相信我，终端 emacs 我们值得拥有！
&lt;/p&gt;&lt;/div&gt;</description><category>ATTACH</category><category>emacs</category><guid>https://fpghwd.github.io/posts/macos-xia-shi-yong-zhong-duan-emacs-er-bu-shi-yong-gui-emacs/</guid><pubDate>Sun, 14 Mar 2021 08:59:06 GMT</pubDate></item><item><title>Macos 下使用 Squirrel 在 vscode 中无法输入中文</title><link>https://fpghwd.github.io/posts/macos-xia-shi-yong-squirrel-zai-vscode-zhong-wu-fa-shu-ru-zhong-wen/</link><dc:creator>Wang Ding</dc:creator><description>&lt;div&gt;&lt;p&gt;
因为 macbook 中写 latex 有点卡，实际我现在的配置，只要编辑稍长的文件多多少少在 macbook air 上有点卡，体验没有 arch 的好。但是 arch 又没有 macbook 那么好的屏幕。也 profiler 了一下，主要时间用在了 native 函数中，感觉是 emacs 版本的问题。
&lt;/p&gt;

&lt;p&gt;
于是下载了 vscode + tex workshop 插件和全套的 mactex ，vscode 编辑起来还是流畅一点。不过 vscode 在切换 Squirrel 中文输入时不能使用，重新修改了 patch 也不行。不过还有系统的中文输入法还能用，全拼用起来果然没有双拼舒服。
&lt;/p&gt;&lt;/div&gt;</description><guid>https://fpghwd.github.io/posts/macos-xia-shi-yong-squirrel-zai-vscode-zhong-wu-fa-shu-ru-zhong-wen/</guid><pubDate>Wed, 10 Mar 2021 07:26:04 GMT</pubDate></item><item><title>Macos emacs-plus@27 is convenient with emacs-rime</title><link>https://fpghwd.github.io/posts/macos-emacs-plus27-is-convenient-with-emacs-rime/</link><dc:creator>Wang Ding</dc:creator><description>&lt;p&gt;
不知道是不是自己的配置问题，使用相同的配置 &lt;code&gt;emacs-plus@28 --with-native-comp&lt;/code&gt; 就会卡顿，退回 emacs-plus@27 就还好。重新编译了一遍 doom-emacs 的 modules 后，感觉 emacs-rime 在编辑 org 文件时没有编译前那么卡了。
&lt;/p&gt;</description><category>emacs</category><guid>https://fpghwd.github.io/posts/macos-emacs-plus27-is-convenient-with-emacs-rime/</guid><pubDate>Wed, 03 Mar 2021 07:56:33 GMT</pubDate></item><item><title>Emacs mouse or touchpad scroll line by line</title><link>https://fpghwd.github.io/posts/emacs-mouse-or-touchpad-scroll-line-by-line/</link><dc:creator>Wang Ding</dc:creator><description>&lt;div&gt;&lt;p&gt;
Just set &lt;code&gt;mouse-wheel-progressive-speed&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt; in init file.
&lt;/p&gt;

&lt;p&gt;
如果需要的话，也可以在对下面进行设置，不过我觉得有了上面的设置已经差不多了。关于 &lt;code&gt;mouse-wheel-progressive-speed&lt;/code&gt; 的解释是：
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
If non-nil, the faster the user moves the wheel, the faster the scrolling.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
另外下面的设置也可以考虑一下：
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-emacs"&gt;(setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
(setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
(setq scroll-step 1) ;; keyboard scroll one line at a time
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;&lt;/div&gt;</description><category>emacs</category><guid>https://fpghwd.github.io/posts/emacs-mouse-or-touchpad-scroll-line-by-line/</guid><pubDate>Sun, 14 Feb 2021 12:06:23 GMT</pubDate></item><item><title>Org-roam</title><link>https://fpghwd.github.io/posts/org-roam/</link><dc:creator>Wang Ding</dc:creator><description>&lt;div&gt;&lt;p&gt;
最近又重拾 org-roam 来做记录。我喜欢这个工具的重大原因是：它是解耦的，另外它是可拓展的。也许正是因为它是解耦的所以它的可拓展性很高吧。
&lt;/p&gt;

&lt;p&gt;
不过我并没有一定要记录很多的 org-roam 卡片，不过这些卡片本身具有解耦的特征，因此对于分析问题应该好处特别的明显。
&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><guid>https://fpghwd.github.io/posts/org-roam/</guid><pubDate>Sun, 24 Jan 2021 12:56:20 GMT</pubDate></item><item><title>Open-close principle</title><link>https://fpghwd.github.io/posts/open-close-principle/</link><dc:creator>Wang Ding</dc:creator><description>&lt;div&gt;&lt;p&gt;
开闭原则是软件工程中对于开发原则的一条描述。它规定：软件中的对象（类，模块，函数等等）应该对于拓展开放，对于修改封闭。这是一条非常重要的原则，它的内涵是：一个实体是允许在不改变它本身（的源代码）的前提下变更它的行为。
&lt;/p&gt;

&lt;p&gt;
这段话我所理解的是：只加不改。也就是对于一个能够运行正常的代码（或者说旧的系统），我们最好是添加一些需要的东西，而不是修改内部的机制。因为内部的机制牵连比较多，修改的时候也比较容易出现引用的问题。但是增加就不用想那么多，也实际上效果更好一点。
&lt;/p&gt;

&lt;p&gt;
对于旧的系统，我的一个理解也包含生活方式或者理念的系统。在接触到一个新的生活方式或者理念的时候，不要急着先否定过去的系统，而是加上去新的机制和理念。它们不应该是互斥存在的，而是可以友好的协作的。如果不行，那么只能说没有组织好。
&lt;/p&gt;

&lt;p&gt;
很有意思的一条原则，发散的话可以得到很多有价值的应用。
&lt;/p&gt;&lt;/div&gt;</description><category>software</category><guid>https://fpghwd.github.io/posts/open-close-principle/</guid><pubDate>Sun, 17 Jan 2021 11:33:03 GMT</pubDate></item><item><title>Turn to archlinux</title><link>https://fpghwd.github.io/posts/turn-to-archlinux/</link><dc:creator>Wang Ding</dc:creator><description>&lt;div&gt;&lt;p&gt;
昨天晚上新装了 archlinux ，目前基本已经能用了。
&lt;/p&gt;

&lt;p&gt;
其实并没有太多理由非要用 archlinux 。 openSUSE 用得还行，唯二让我换的理由是：1. fcitx-rime 出了一点问题，用了一段时间后，虽然切换到中文，但是无法打出中文。 2. 装各种包有点麻烦。这点 archlinux 可以说完全解决痛点。
&lt;/p&gt;

&lt;p&gt;
早就想换，昨天晚上干脆就下定决心借来了 U 盘开始装 archlinux 。全程也没有花费太多时间（也就十多个小时吧。
&lt;/p&gt;

&lt;div id="orgf88e358" class="figure"&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/fpGHwd/fpghwd.github.io/master/images/_20210104_190229screenshot.png" alt="_20210104_190229screenshot.png"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
装好了之后，装上了 xfce 桌面，emacs 启动速度也很快，用起来两个字：开心。
&lt;/p&gt;

&lt;p&gt;
虽然还有一些配置文件还没有搬运过来，直接挂载上了 openSUSE 的之前 home 目录，后面想到了就再配置。
&lt;/p&gt;&lt;/div&gt;</description><category>ATTACH</category><guid>https://fpghwd.github.io/posts/turn-to-archlinux/</guid><pubDate>Mon, 04 Jan 2021 11:35:21 GMT</pubDate></item><item><title>2020 年终总结</title><link>https://fpghwd.github.io/posts/2020-nian-zhong-zong-jie/</link><dc:creator>Wang Ding</dc:creator><description>&lt;div&gt;&lt;p&gt;
今年虽然并没有什么好记录的，可能是因为平时记录得太多，到了现在并没有太多写的欲望。不过为了仪式感，也稍微写一点吧。
&lt;/p&gt;

&lt;p&gt;
今年唯一重要的事情，是看了几本书。
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
《被讨厌的勇气》
&lt;/p&gt;

&lt;p&gt;
其中对自己最有启发的是「课题分离」。具体不展开了，因为基于这一点其实有很多结论。
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
《禅与摩托车维修艺术》
&lt;/p&gt;

&lt;p&gt;
这本书看了一半多，还没有看完。其中「良质」的概念引人深思。
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
《1984》
&lt;/p&gt;

&lt;p&gt;
虽然看到很多推这本书的地方，但是反而对现在的社会现状有太多接触而并不觉得这本书很激进，像是一本“社会就是这个样子”的小说一样。
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
《深夜加油站遇见苏格拉底》
&lt;/p&gt;

&lt;p&gt;
这本书是看到《和平战士》这部电影，然后才看的原著。「活在当下」是电影给我的最大提醒。
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
电影《 Meet Black 》
&lt;/p&gt;

&lt;p&gt;
之前的博客有提到这部影片，其实我最喜欢的一句话也是女主的父亲的话。 &lt;i&gt;Stay Open&lt;/i&gt; 「谁知道呢？任何事情都有可能发生」。
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><guid>https://fpghwd.github.io/posts/2020-nian-zhong-zong-jie/</guid><pubDate>Thu, 31 Dec 2020 10:45:48 GMT</pubDate></item><item><title>Emacs 自动保存文件设置</title><link>https://fpghwd.github.io/posts/emacs-zi-dong-bao-cun-wen-jian-she-zhi/</link><dc:creator>Wang Ding</dc:creator><description>&lt;div&gt;&lt;p&gt;
Emacs 自带文件自动保存的机制，利用 &lt;code&gt;do-auto-save&lt;/code&gt; 可以自动存储当前编辑的文件为一个编辑过的复本，并未直接存储到 buffer 对应的文件中。当然也可以直接开启全局的 &lt;code&gt;(auto-save-visited-mode t)&lt;/code&gt; ，在默认的 &lt;code&gt;auto-save-visited-interval&lt;/code&gt; 时间（默认 5 秒），后会自动将已经修改后的 buffer 内容写入文件中。
&lt;/p&gt;

&lt;p&gt;
其中使用 &lt;code&gt;do-auto-save&lt;/code&gt; 保存的文件的复本可以在打开该文件本身时有提示。这是一个好的地方，也是容易忽略的地方：某次并没有将改动保存到文件，而是自动保存到了某个复本，而下一次用 emacs 打开该文件，虽然 emacs 有提醒该文件有复本未保存到文件中，此时极有可能形成了两个新的基于原文件改动的分枝。众所周知，合并文件是一件耗时的事情。所以我觉得还是打开 &lt;code&gt;(auto-save-visited-mode t)&lt;/code&gt; 更好，避免形成两个改动文件并且需要合并内容的情形。
&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><guid>https://fpghwd.github.io/posts/emacs-zi-dong-bao-cun-wen-jian-she-zhi/</guid><pubDate>Wed, 23 Dec 2020 12:06:34 GMT</pubDate></item><item><title>Tutorial to workstation</title><link>https://fpghwd.github.io/posts/tutorial-to-workstation/</link><dc:creator>Wang Ding</dc:creator><description>&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
代理
&lt;/p&gt;

&lt;p&gt;
目前最爽的解决方案是&lt;a href="https://www.imperva.com/learn/ddos/transparent-proxy/"&gt;透明代理&lt;/a&gt;。
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
SSHD
&lt;/p&gt;

&lt;p&gt;
开启服务器的 sshd 服务
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/SSH_(Secure_Shell)"&gt;SSH&lt;/a&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;a href="https://www.zsythink.net/archives/2450"&gt;ssh 隧道内网穿透&lt;/a&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;a href="https://zhuanlan.zhihu.com/p/34908698"&gt;ssh 内网穿透&lt;/a&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;实施条件

&lt;ul class="org-ul"&gt;
&lt;li&gt;公共 IP 主机（VPS），也称“&lt;a href="https://www.cnblogs.com/RXDXB/p/11491164.html"&gt;跳板机&lt;/a&gt;”&lt;/li&gt;

&lt;li&gt;需要访问的内网机器（待穿透的内网机器）能访问并 SSH 登录公共主机&lt;/li&gt;

&lt;li&gt;本地机器（访问内网机器的机器）能访问并 SSH 登录中间主机&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;实施过程

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
内网穿透到跳板机
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-bash"&gt;            ssh -qTfNn -R '[::]:22222:localhost:22' [Jump Server User]@[Jumper Server IP or Domain Name]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
本地机器访问内网机器
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-bash"&gt;            ssh -p 22222 [Remote User on machine on sub-network]@[Jump Server IP or Domain Name]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
&lt;a href="https://www.everythingcli.org/ssh-tunnelling-for-fun-and-profit-autossh/"&gt;autossh&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
autossh 是对 ssh 的增强，因此使用 ssh 隧道来进行内网穿透，仅使用 autossh 即可
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
登录
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;ssh user@hostname&lt;/code&gt;
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
无密码登录
&lt;/p&gt;

&lt;p&gt;
需要上传本地密钥到远程主机用户的 &lt;code&gt;~/.ssh/known_hosts&lt;/code&gt; 文件中
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;生成本地密钥 &lt;code&gt;ssh-keygen&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;上传本地密钥 &lt;code&gt;ssh-copy-id&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;更快登录

&lt;ol class="org-ol"&gt;
&lt;li&gt;设置 &lt;code&gt;.ssh/config&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;文件传输

&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;p&gt;
采用 &lt;a href="https://filezilla-project.org/"&gt;Filezilla&lt;/a&gt; 传输文件
&lt;/p&gt;

&lt;p&gt;
最方便的一种方式，根据 ssh 信息来配置即可
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
采用 &lt;a href="https://man7.org/linux/man-pages/man1/scp.1.html"&gt;scp&lt;/a&gt; 传输少量文件
&lt;/p&gt;

&lt;p&gt;
在实现 ssh 免密码的基础上，在命令行 &lt;code&gt;scp [filename] [remote-host]&lt;/code&gt; 即可
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
采用 &lt;a href="https://git-scm.com/docs/user-manual"&gt;git&lt;/a&gt; 同步文件
&lt;/p&gt;

&lt;p&gt;
需要 git 操作基础
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;运行代码

&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;p&gt;
python 运行脚本
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;python test.py&lt;/code&gt;
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;脚本参数

&lt;ol class="org-ol"&gt;
&lt;li&gt;参考 &lt;a href="https://www.tutorialspoint.com/python/python_command_line_arguments.htm"&gt;python 参数使用&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
脚本循环
&lt;/p&gt;

&lt;p&gt;
有时需要跑一个耗时较长的程序，写一个脚本在 python 运行时传入参数来自动化程序运行
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-bash"&gt;
#!/bin/bash
# cmd='nohup python -u ga_kpca.py &amp;gt; "log/ga-custom-kernel-kpca_"$(date "+%Y-%m-%d_%H-%M-%S").log 2&amp;gt;&amp;amp;1'

cd ~/wangding/ga-kpca
conda activate "wangding"

for i in $(seq 2 7)
do
    for j in $(seq 2 7)
    do
        nohup python -u ga_kpca.py $i $j &amp;gt; "log/ga-custom-kernel-kpca_"$(date "+%Y-%m-%d_%H-%M-%S").log 2&amp;gt;&amp;amp;1
    done
done

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
其中 &lt;code&gt;$i&lt;/code&gt; 和 &lt;code&gt;$j&lt;/code&gt; 就是在 bash 中传入 python 的参数，参数可以结合具体代码逻辑做任何事情。
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
后台运行
&lt;/p&gt;

&lt;p&gt;
后台运行在命令后面加入 &lt;code&gt;&amp;amp;&lt;/code&gt; ，也即命令成为 &lt;code&gt;python test.py &amp;amp;&lt;/code&gt; 即可。
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
存储日志
&lt;/p&gt;

&lt;p&gt;
在代码中，在关键信息的地方打印日志即可。
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
存储图像
&lt;/p&gt;

&lt;p&gt;
代码在后台运行时，无需使用 &lt;code&gt;matplotlib.show()&lt;/code&gt; 来查看图像，因此保存 &lt;code&gt;matlplotlib.savefig(filename=filename)&lt;/code&gt; 即可。
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;打印关键信息和保存日志以及查看日志
&lt;ol class="org-ol"&gt;
&lt;li&gt;打印日志
&lt;ol class="org-ol"&gt;
&lt;li&gt;代码中添加需要打印的信息&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;保存日志
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;p&gt;
使用文件重定向
&lt;/p&gt;

&lt;p&gt;
例如 &lt;code&gt;python test.py &amp;gt; log.txt&lt;/code&gt;
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
同时将错误信息重定向
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;2&amp;gt;&amp;amp;1&lt;/code&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;查看日志
&lt;ol class="org-ol"&gt;
&lt;li&gt;使用 &lt;a href="https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=&amp;amp;ved=2ahUKEwiWkLuoytbtAhWCc30KHSz2AAUQFjAAegQIARAD&amp;amp;url=https%3A%2F%2Fwww.jetbrains.com%2Fpycharm%2F&amp;amp;usg=AOvVaw08gOuiX9h_nAkWJhXYmZeT"&gt;Pycharm&lt;/a&gt; 设置 &lt;a href="https://www.jetbrains.com/help/pycharm/creating-a-remote-server-configuration.html"&gt;sftp&lt;/a&gt; 来查看文件，最方便&lt;/li&gt;

&lt;li&gt;ssh 登录远程机器，然后使用 &lt;code&gt;more&lt;/code&gt; or &lt;code&gt;less&lt;/code&gt; 命令查看&lt;/li&gt;

&lt;li&gt;&lt;a href="https://www.gnu.org/software/emacs/"&gt;Emacs&lt;/a&gt; 的 &lt;a href="https://www.emacswiki.org/emacs/TrampMode"&gt;tramp&lt;/a&gt;, 次方便。&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;</description><category>tutorial</category><guid>https://fpghwd.github.io/posts/tutorial-to-workstation/</guid><pubDate>Fri, 18 Dec 2020 02:46:19 GMT</pubDate></item></channel></rss>